name: Build

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:

  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.SHELL }}
    env:
      CSPICE_DIR: ${{ matrix.CSPICE_DIR }}
      CSPICE_URL: ${{ matrix.CSPICE_URL }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        download_cspice: [true, false]
        include:
          - os: ubuntu-latest
            CSPICE_URL: "https://naif.jpl.nasa.gov/pub/naif/toolkit//C/PC_Linux_GCC_64bit/packages/cspice.tar.Z"
            SHELL: bash
          - os: macos-latest
            CSPICE_URL: "https://naif.jpl.nasa.gov/pub/naif/toolkit//C/MacIntel_OSX_AppleC_64bit/packages/cspice.tar.Z"
            SHELL: bash
          - os: windows-latest
            CSPICE_URL: "https://naif.jpl.nasa.gov/pub/naif/toolkit//C/PC_Windows_VisualC_64bit/packages/cspice.zip"
            SHELL: powershell
          - download_cspice: false
            CSPICE_DIR: '${{ github.workspace }}/cspice'

    steps:
      - uses: actions/checkout@v2

      - name: Download CSPICE
        if: ${{ matrix.os != 'windows-latest' && matrix.download_cspice }}
        run: wget ${{ matrix.CSPICE_URL }}

      - name: Download CSPICE (Windows)
        if: ${{ matrix.os == 'windows-latest' && matrix.download_cspice }}
        run: wget ${{ matrix.CSPICE_URL }} -outfile cspice.zip

      - name: Extract CSPICE
        if: ${{ matrix.os != 'windows-latest' && matrix.download_cspice }}
        run: tar -zxvf "${CSPICE_URL##*/}"

      - name: Extract CSPICE (Windows)
        if: ${{ matrix.os == 'windows-latest' && matrix.download_cspice }}
        run: tar -xf cspice.zip

      - name: Fix libcspice name
        if: ${{ matrix.os != 'windows-latest' && matrix.download_cspice }}
        run: mv $CSPICE_DIR/lib/cspice.a $CSPICE_DIR/lib/libcspice.a

      - name: Cargo Test
        run: cargo test -- --nocapture --test-threads=1

      - name: Cargo Clippy Check
        run: cargo clippy --workspace -- -D warnings

  check_style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cargo Format Check
        run: cargo fmt -- --check

      - name: Cargo Sort Check
        run: cargo install cargo-sort && cargo-sort --check --workspace
